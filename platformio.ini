# PlatformIO 项目配置文件
#
# 本文件定义了项目的所有构建、上传、库依赖和高级脚本选项。
# 它确保了所有开发者都能在一致的环境下进行编译和开发。
# 官方文档: https://docs.platformio.org/page/projectconf.html
#

[env:esp32s3_n8r8]            #自定义的覆写株型，定义文件位置boards/esp32s3_n8r8.json
# ==============================================================================
#  核心构建配置 (Core Build Configuration)
# ==============================================================================
platform  = espressif32@~6.11.0     # 平台: 指定使用 espressif32 平台，版本号兼容 6.11.0
framework = arduino                 # 框架: 使用 Arduino 核心作为开发框架
board     = esp32-s3-devkitc-1      # 引用的基础板型: 实际硬件配置(如PSRAM)将通过下面的 `board_build` 选项进行覆写。

# ==============================================================================
#  硬件与分区配置 (Hardware & Partition Configuration)
# ==============================================================================
# -- 内存与闪存 --
# 使用PlatformIO内置的高优先级复合配置，以同时启用QIO Flash和OPI Octal PSRAM。
# 这是为 N8R8 (8MB Octal PSRAM + 8MB Quad Flash) 模块启用最高性能的推荐方式。
# 它会自动处理底层的 sdkconfig 选项，如 SPIRAM_MODE_OCT, SPIRAM_SPEED_80M 等，避免手动配置错误。
board_build.arduino.memory_type = qio_opi_malloc   # 内存类型: 启用 QIO Flash 和 OPI Octal PSRAM，并将 8MB PSRAM 集成到主内存堆(malloc)中。

# -- 分区与文件系统 --
board_build.partitions = my_8MB.csv           # 分区表: 指定使用项目根目录下的自定义分区表 `my_8MB.csv`。
board_build.filesystem = littlefs             # 默认文件系统: 指定使用 LittleFS 作为 `/data` 目录的文件系统，用于存放Web UI资源。
# board_build.filesystem_force_format = true  # 强制格式化(开发用): 上传文件系统时强制格式化。发布时请务必注释掉此行，以防擦除用户数据。

# ==============================================================================
#  构建前处理脚本 (Pre-build Scripts)
# ==============================================================================
extra_scripts = pre:minify_gzip.py            # 额外脚本: 在构建文件系统镜像前，运行 `minify_gzip.py` 脚本，自动对Web资源进行压缩。

# ==============================================================================
#  编译标志 (Build Flags)
# ==============================================================================
build_flags =
    # -- PSRAM 集成已由qio_opi_malloc完成 --
    # -DCONFIG_SPIRAM_USE_MALLOC              # 启用 PSRAM 内存分配器。
    # -DCONFIG_SPIRAM_MALLOC_USE_MALLOC       # 使默认的 malloc() 函数能从 PSRAM 分配内存。
    
    # -- 调试模式开关 --
    -DCORE_DEBUG_MODE=1                     # 定义全局调试模式开关。开发时设为 1，编译发布版时设为 0。

    # -- 原生USB配置 (可选) --
    # -DARDUINO_USB_MODE=1                  # 启用原生USB作为大容量存储设备(MSC)。
    # -DARDUINO_USB_CDC_ON_BOOT=1           # 使能原生USB口的CDC功能，启动后即可用作串口(Serial)。

# ==============================================================================
#  底层SDK配置 (SDK-Config Options)
# ==============================================================================
board_build.sdkconfig_options =
    # -- 日志级别 --
    CONFIG_LOG_DEFAULT_LEVEL=4              # 设置ESP-IDF默认日志级别为 4 (Debug)。发布时应改为 3 (Info)。
    
    # -- 蓝牙协议栈配置 --
    # 选择功能更全面的 Bluedroid 协议栈，以支持经典蓝牙(A2DP)和低功耗蓝牙(BLE)。
    CONFIG_BT_ENABLED=y                     # 启用蓝牙控制器 (Controller)，是所有蓝牙功能的基础。
    CONFIG_BT_HOST_BLUEDROID_ENABLED=y      # 选择并启用 Bluedroid 作为蓝牙主机协议栈。
    CONFIG_BT_HOST_NIMBLE_ENABLED=n         # 确保禁用 NimBLE 协议栈，因为两者互斥。
    
    # -- 蓝牙PAN网络配置 --
    CONFIG_BT_PAN_ENABLED=y                   # 启用蓝牙个人局域网(PAN)协议，用于提供蓝牙网络共享配网。
    CONFIG_BT_PAN_NAP_IP_ADDR="192.168.7.1"   # [PAN IP地址] 设置ESP32作为网络接入点(NAP)时的静态IP。
    CONFIG_BT_PAN_NAP_NETMASK="255.255.255.0" # [PAN 子网掩码]
    CONFIG_BT_PAN_NAP_DHCP_SVR_EN=y           # [PAN DHCP服务] 启用DHCP服务器，为连接到PAN的设备自动分配IP。
    CONFIG_BT_PAN_NAP_DHCP_SVR_IP_ADDR_START="192.168.7.2" # [DHCP起始IP]
    CONFIG_BT_PAN_NAP_DHCP_SVR_IP_ADDR_END="192.168.7.5"   # [DHCP结束IP]

# ==============================================================================
#  库依赖管理 (Library Dependencies)
# ==============================================================================
lib_deps =
    # --- 核心与网络 ---
    esphome/AsyncTCP-esphome @ ^2.1.4             # 异步TCP库，是ESPAsyncWebServer的基础依赖。
    esphome/ESPAsyncWebServer-esphome @ ^3.4.0    # 异步Web服务器库，用于构建高性能的Web服务。
    
    # --- 数据处理 ---
    bblanchon/ArduinoJson @ ^7.4.1                # 高效的JSON库，用于API数据交换和配置处理。

    # --- 后期功能模块 (占位) ---
    # esp32-camera                                # [后期] ESP32 UVC USB摄像头驱动库。
    # zxing-cpp                                   # [后期] 强大的条码识别库。

# ==============================================================================
#  上传与监视端口 (Upload & Monitor Ports)
# ==============================================================================
# 请根据你的实际硬件连接修改COM端口号。
# --- 上传配置 ---
upload_port       = COM3               # 上传端口: 指定用于烧录固件的端口 (例如 CH340K 硬件UART桥接芯片)。
upload_speed      = 921600             # 上传波特率: 使用高速波特率以缩短烧录时间。

# --- 串口监视器配置 ---
monitor_port      = COM4               # 监视端口: 指定用于查看程序日志输出的端口 (N8R8通过硬件UART0输出)。
monitor_speed     = 115200             # 监视波特率: 必须与代码中 `Serial.begin()` 的速率一致。
